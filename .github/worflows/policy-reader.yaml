name: AWS Policy Reader - Terragrunt Stack POC

on:
  workflow_dispatch:
    inputs:
      role-name:
        description: 'IAM role name to read'
        required: true
        default: 'terragrunt-execution-role'
      environment:
        description: 'Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
          - management
          - monitoring

permissions:
  id-token: write
  contents: read

jobs:
  read-aws-policies:
    runs-on: ubuntu-latest
    name: Read AWS Execution Policies - ${{ matrix.env }}
    strategy:
      matrix:
        include:
          - env: development
            account_id: '567749996660'
          - env: production  
            account_id: '123456789012'
          - env: management
            account_id: '987654321098'
          - env: monitoring
            account_id: '456789012345'
    
    steps:
    - name: Checkout repository
      if: matrix.env == inputs.environment
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      if: matrix.env == inputs.environment
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ matrix.account_id }}:role/github-actions-policy-reader
        aws-region: eu-west-1
    
    - name: Read AWS Role Policies
      if: matrix.env == inputs.environment
      id: read-policies
      uses: GergoNagy94/devops-tools/aws-execution-policy-reader@main
      with:
        role-name: ${{ inputs.role-name }}
        account-id: ${{ matrix.account_id }}
        environment-name: ${{ matrix.env }}
    
    - name: Upload policies artifact
      if: matrix.env == inputs.environment && steps.read-policies.outputs.has-role == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: aws-policies-${{ matrix.env }}-${{ github.run_number }}
        path: ${{ steps.read-policies.outputs.policies-file }}
    
    - name: Display policies summary
      if: matrix.env == inputs.environment && steps.read-policies.outputs.has-role == 'true'
      shell: bash
      run: |
        echo "## AWS Role Policies Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Role Name**: ${{ inputs.role-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Account ID**: ${{ matrix.account_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ matrix.env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Policies File**: ${{ steps.read-policies.outputs.policies-file }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ -f "${{ steps.read-policies.outputs.policies-file }}" ]]; then
          managed_count=$(jq '.policies.managed | length' "${{ steps.read-policies.outputs.policies-file }}")
          inline_statements=$(jq '.policies.inline.Statement | length' "${{ steps.read-policies.outputs.policies-file }}")
          echo "- **Managed Policies**: $managed_count" >> $GITHUB_STEP_SUMMARY
          echo "- **Inline Policy Statements**: $inline_statements" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Managed Policies:" >> $GITHUB_STEP_SUMMARY
          if [[ $managed_count -gt 0 ]]; then
            jq -r '.policies.managed[]' "${{ steps.read-policies.outputs.policies-file }}" | while read policy; do
              echo "- $policy" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "- None" >> $GITHUB_STEP_SUMMARY
          fi
        fi